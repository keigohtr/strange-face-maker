package com.apitore.potato.zzscruches;

import static org.bytedeco.javacpp.opencv_imgcodecs.IMREAD_COLOR;
import static org.bytedeco.javacpp.opencv_imgcodecs.imread;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;

import org.bytedeco.javacpp.indexer.UByteRawIndexer;
import org.bytedeco.javacpp.opencv_core.Mat;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.web.client.RestTemplate;

public class MsFace {

  static String ENDPOINT     = "https://westcentralus.api.cognitive.microsoft.com/face/v1.0/detect";
  static String ACCESS_TOKEN = "YOUR-ACCESS-TOKEN";
  static String[] LANDS = new String[]{
      "pupilLeft","pupilRight","noseTip",
      "mouthLeft","mouthRight","eyebrowLeftOuter",
      "eyebrowLeftInner","eyeLeftOuter","eyeLeftTop",
      "eyeLeftBottom","eyeLeftInner","eyebrowRightInner",
      "eyebrowRightOuter","eyeRightInner","eyeRightTop",
      "eyeRightBottom","eyeRightOuter","noseRootLeft",
      "noseRootRight","noseLeftAlarTop","noseRightAlarTop",
      "noseLeftAlarOutTip","noseRightAlarOutTip","upperLipTop",
      "upperLipBottom","underLipTop","underLipBottom",
      };
  static double[] ANGER = new double[] {-0.057367466390132904,-0.08982157707214355,-0.016365621238946915,-0.016569199040532112,0.05659179389476776,0.08057866245508194,-0.07628373801708221,0.020333876833319664,-0.09151680767536163,0.06190112978219986,-0.019595850259065628,0.04688451439142227,0.08233332633972168,-0.09586472809314728,-0.08472523093223572,-0.042589347809553146,0.06260994076728821,0.10031542181968689,-0.04130399227142334,0.04141196981072426,-0.03235974907875061,0.03497380018234253,-0.04890591651201248,0.0002506319433450699,0.03672946244478226,-0.15024220943450928,0.001759376609697938,0.10809219628572464,0.1114930659532547,-0.015196665190160275,0.018446212634444237,-0.04708784073591232,-0.07338041812181473,0.09308895468711853,-0.008084366098046303,-0.061433546245098114,0.01993638277053833,0.05334893614053726,0.09029559791088104,-0.0245235413312912,0.07139270752668381,0.06887449324131012,-0.02957753837108612,-0.07222434133291245,0.018099982291460037,-0.05582652613520622,0.00033384570269845426,-0.00815395824611187,0.09965219348669052,-0.10670778155326843,0.06968063116073608,-0.06663713604211807,-0.14600373804569244,-0.04413078352808952,-0.10198663920164108,0.0067326370626688,-0.09561781585216522,0.08411796391010284,0.06085105240345001,0.011559282429516315,-0.016805216670036316,0.08834849298000336,-0.10968563705682755,0.1456679254770279,-0.059793293476104736,0.08436959236860275,0.05430341511964798,-0.096995048224926,0.04143599420785904,0.022843416780233383,-0.0489366240799427,-0.06243929639458656,-0.04693974182009697,-0.018273841589689255,-0.05101102590560913,-0.06044117361307144,-0.021568212658166885,-0.05615566298365593,-0.05850793793797493,-0.08025000989437103,0.10329972952604294,-0.06239570677280426,0.08238831162452698,0.10968316346406937,0.0523441806435585,-0.11361699551343918,0.057560887187719345,-0.053215693682432175,0.02790781483054161,-0.02352745272219181,0.05630971118807793,0.07721370458602905,-0.07886014878749847,-0.026018664240837097,-0.09280018508434296,0.008390968665480614,0.031107334420084953,-0.10775092244148254,-0.08734125643968582,-0.08044120669364929,-0.08243561536073685,-0.03043171763420105,-0.06880415976047516,-0.028130212798714638,0.025748219341039658,0.1156807467341423,-0.03826421499252319,0.004030171316117048,-0.0036841901019215584,0.18492253124713898,-0.021069427952170372,0.1393241137266159,0.03477369248867035,-0.039900995790958405,-0.07325832545757294,0.17338354885578156,0.05003697797656059,0.008542784489691257,0.11704039573669434,0.1290145218372345,0.03096790239214897,0.05180130898952484,-0.04754205048084259,-0.09261146932840347,-0.07176171988248825,-0.00539601594209671,-0.08784673362970352,-0.011495634913444519,0.21917562186717987,-0.10003507882356644,0.05618365481495857,-0.0910472497344017,-0.007974157109856606,0.07594593614339828,0.01901434361934662,-0.0251501202583313,0.0008489784668199718,-0.03635227680206299,0.06797994673252106,0.025901272892951965,0.03635995835065842,0.02749248966574669,0.006362880580127239,0.023754805326461792,-0.14115877449512482,-0.05011375620961189,0.056580401957035065,0.03184511512517929,-0.11876089125871658,-0.05054839700460434,0.03604889661073685,-0.08380270004272461,-0.08078545331954956,-0.04640108346939087,0.029585957527160645,-0.047128211706876755,0.02282087877392769,-0.0026100887916982174,-0.0710306242108345,0.018870702013373375,0.020859410986304283,0.013913538306951523,0.03797147795557976,-0.02647361531853676,-0.052083391696214676,-0.04257820174098015,0.06185704842209816,0.010585978627204895,-0.10523518919944763,-0.053115393966436386,0.057989589869976044,0.06163588538765907,0.02339346893131733,-0.05829470604658127,0.043911851942539215,-0.12784184515476227,0.017278991639614105,-0.07953575998544693,-0.07728726416826248,0.0021395348012447357,0.023193359375,0.13338546454906464,0.12983351945877075,-0.09578770399093628,0.016840633004903793,0.02153007499873638,-0.041301269084215164,0.05337320640683174,0.06689866632223129,-0.05000775679945946,-0.01504385843873024,0.05551224574446678,-0.10971733927726746,0.07620621472597122,0.03185180202126503,0.011017650365829468,-0.18085692822933197,0.03170989453792572,-0.0480794720351696,0.06487850099802017};
  static double[] DISGUST = new double[] {0.015704354271292686,-0.10592237859964371,0.01586141809821129,-0.040980517864227295,0.03357039764523506,-0.01396667305380106,-0.011187124997377396,0.05437282472848892,-0.10388189554214478,0.042727917432785034,0.05336426571011543,0.03993356227874756,0.04606031998991966,-0.0032912290189415216,0.004951185081154108,-0.02098563313484192,0.08163603395223618,0.06028259918093681,0.03329327329993248,0.06440635025501251,0.01310639176517725,0.055289313197135925,0.0661613792181015,0.02405664324760437,0.00021281492081470788,-0.12612268328666687,-0.020540108904242516,0.11185666918754578,-0.019287971779704094,-0.1242297813296318,-0.04952619597315788,0.017631717026233673,-0.043723054230213165,0.08603181689977646,0.0787285640835762,0.015453369356691837,-0.11221152544021606,0.027801262214779854,-0.0005554006202146411,-0.004593332298099995,-0.04189562425017357,0.055060770362615585,-0.08039014041423798,-0.04825069382786751,-0.015879925340414047,0.05917619168758392,-0.012926192954182625,0.027730708941817284,0.05347368121147156,-0.10842294991016388,0.06359117478132248,-0.09934570640325546,-0.07427332550287247,-0.033902570605278015,-0.08741118013858795,0.06886135786771774,-0.03649336099624634,0.08550140261650085,0.03483618423342705,0.04114174842834473,0.098143070936203,0.12203015387058258,-0.11288952082395554,0.09673663973808289,-0.07324719429016113,0.08190274983644485,-0.05371217057108879,-0.1313091218471527,0.011750621721148491,0.00542377308011055,0.007174869999289513,0.03532010316848755,-0.03468582406640053,-0.028127191588282585,-0.00941451545804739,0.011417057365179062,-0.05681857466697693,-0.007129530888050795,-0.026019630953669548,-0.16068914532661438,0.023809131234884262,-0.06266103684902191,0.038445476442575455,0.046808872371912,0.07684561610221863,-0.04978596791625023,0.016849622130393982,0.013752932660281658,0.026338160037994385,0.009148728102445602,0.05872303619980812,-0.03528609871864319,0.02828703448176384,-0.02593172900378704,-0.05895250663161278,0.04365735873579979,0.08436839282512665,-0.10481689125299454,-0.04152343049645424,-0.009532719850540161,-0.059056371450424194,0.029996955767273903,0.0035762160550802946,0.020686304196715355,0.0024004133883863688,0.004829279147088528,0.06937627494335175,0.13380321860313416,-0.016209326684474945,0.21003028750419617,-0.0047649722546339035,0.15502987802028656,-0.07907253503799438,0.012313424609601498,-0.07600939273834229,0.179635688662529,0.03332218900322914,-0.049201421439647675,0.011544515378773212,0.10853329300880432,-0.0008107785251922905,0.09694436192512512,0.012147568166255951,-0.15159083902835846,-0.07082618772983551,-0.06943780183792114,-0.009123051539063454,0.016108931973576546,0.12221336364746094,-0.05731891840696335,-0.026051552966237068,-0.11591774225234985,-0.03762035816907883,0.12192051112651825,-0.04265805706381798,-0.10684788972139359,0.021958105266094208,0.02207653969526291,0.10152844339609146,-0.007571815978735685,-0.0298836100846529,0.04124399274587631,-0.10499686747789383,0.11007735878229141,-0.13368362188339233,-0.09225480258464813,0.04765874147415161,-0.02049870230257511,-0.07332538068294525,-0.040135737508535385,-0.058293476700782776,-0.01496366411447525,0.01505989395081997,-0.055090148001909256,0.02045081928372383,-0.021970827132463455,0.024954399093985558,0.013938683085143566,-0.12150157988071442,0.14941643178462982,-0.07800661027431488,0.05594742298126221,-0.028217870742082596,-0.10492006689310074,-0.11961748450994492,0.16911962628364563,-0.03159237280488014,0.037607401609420776,-0.09786386042833328,-0.066712386906147,0.07194046676158905,0.06246950849890709,0.04049544036388397,-0.04520003870129585,0.026241004467010498,-0.08769917488098145,0.09267488121986389,-0.07388147711753845,-0.07395434379577637,0.000483691314002499,-0.013973843306303024,0.077507883310318,0.10034477710723877,-0.1573130041360855,0.04913410544395447,0.09571720659732819,-0.0862865075469017,0.14553625881671906,0.0668976753950119,0.023883847519755363,-0.04207535833120346,0.07314448803663254,-0.07586365938186646,0.13744674623012543,0.009768898598849773,-0.0014989572810009122,-0.06660760194063187,0.009956036694347858,-0.008492471650242805,0.016398776322603226};
  static double[] SADNESS = new double[] {0.04327743127942085,-0.14705081284046173,-0.020916635170578957,-0.06410476565361023,0.011572767980396748,0.02822115272283554,-0.014245989732444286,-0.013394578360021114,-0.09818018972873688,0.06646384298801422,-0.04374024271965027,-0.011867926456034184,-0.07564443349838257,0.07344205677509308,-0.0332111157476902,-0.04198753833770752,0.03620894253253937,0.006601782515645027,0.008002632297575474,-0.1368752270936966,-0.02858809381723404,0.020547745749354362,-0.010177514515817165,0.06586720049381256,-0.03799181804060936,-0.16897311806678772,0.04777732864022255,0.05732583627104759,-0.08157292753458023,-0.04321562498807907,-0.02803354524075985,-0.007653210777789354,-0.09033985435962677,0.2170947641134262,0.02114073932170868,-0.0026758983731269836,0.012099090032279491,0.15343941748142242,0.07366373389959335,-0.0950833261013031,-0.0645938515663147,0.09230206906795502,-0.008473475463688374,0.03701825812458992,0.05497916415333748,-0.01759347692131996,-0.041529834270477295,-0.09222760796546936,0.08326748013496399,-0.04982738196849823,-0.03824269399046898,-0.10504014045000076,-0.06324581056833267,0.14064538478851318,-0.06083465367555618,0.05200323835015297,-0.07194485515356064,0.04111836478114128,0.09753536432981491,-0.1111404225230217,0.049807675182819366,0.0856727883219719,0.011504879221320152,0.04092613607645035,-0.13805562257766724,0.05548066645860672,-0.006888181436806917,-0.1542300134897232,0.046989429742097855,0.0063134366646409035,-0.0388052724301815,0.013707013800740242,0.02500530518591404,-0.1020883098244667,-0.053689513355493546,-0.022093134000897408,-0.06982934474945068,-0.06555403769016266,-0.06791336089372635,-0.036727722734212875,0.04813186079263687,0.016894876956939697,0.002907305024564266,0.09888389706611633,0.02433030866086483,-0.0414232574403286,-0.019196048378944397,-0.05690827965736389,0.07281548529863358,-0.05220082402229309,0.1018790453672409,0.09934014827013016,0.031874507665634155,-0.10764791071414948,-0.05748400092124939,0.005604616831988096,0.02246859297156334,-0.10201920568943024,-0.0381811298429966,0.03511055186390877,-0.05447595566511154,0.0529814288020134,-0.051885224878787994,-0.024373378604650497,0.016059527173638344,0.031895436346530914,0.033976148813962936,0.06538492441177368,0.037088580429553986,0.15047785639762878,-0.0653785914182663,-0.004716949537396431,-0.039327945560216904,0.0024291619192808867,-0.06561462581157684,0.14514940977096558,0.09556853026151657,-0.09006976336240768,-0.03831642121076584,0.04562678188085556,0.10578400641679764,0.024400386959314346,0.04045359045267105,-0.08623147755861282,-0.11525902152061462,-0.12737831473350525,-0.053893912583589554,-0.03769885003566742,0.23683537542819977,-0.05892645940184593,-0.052863411605358124,-0.06641079485416412,-0.03586317226290703,-0.07370582967996597,-0.041067998856306076,-0.04554234445095062,-0.0374465174973011,-0.0020622205920517445,0.022610940039157867,0.019824570044875145,0.12147001922130585,-0.0011791764991357923,-0.09955476224422455,0.0071465978398919106,-0.035604994744062424,-0.018291106447577477,-0.026587922126054764,-0.012857792899012566,-0.0032708400394767523,0.0062521169893443584,-0.031188562512397766,-0.023437775671482086,0.043056972324848175,-0.03780250996351242,-0.015389883890748024,-0.056990768760442734,0.051151342689991,-0.011720225214958191,-0.0465475395321846,-0.009506167843937874,0.007832057774066925,-0.04518294706940651,0.02338399924337864,0.030871503055095673,-0.043946586549282074,0.07230667769908905,-0.018079165369272232,0.046095676720142365,-0.09517385065555573,0.012337553314864635,-0.032251182943582535,0.09376692026853561,-0.07871891558170319,-0.0838407650589943,0.10875213891267776,-0.0722285732626915,0.09744557738304138,-0.24657830595970154,-0.12752893567085266,-0.028155941516160965,0.015423948876559734,0.07795704901218414,0.05960851162672043,-0.07285027951002121,0.031791046261787415,0.06316843628883362,-0.05815194174647331,0.04338473826646805,0.049918632954359055,0.06418433040380478,0.013342749327421188,-0.05660655349493027,-0.1112937182188034,0.03113405406475067,0.0872359424829483,0.07449202984571457,-0.13894183933734894,0.018539058044552803,0.010457100346684456,0.044206950813531876};

  @SuppressWarnings("rawtypes")
  public static void main(String[] args) throws IOException {
    RestTemplate restTemplate = new RestTemplate();
    restTemplate.getMessageConverters().add(0, new StringHttpMessageConverter(Charset.forName("UTF-8")));

    String url = String.format("%s?returnFaceLandmarks=true&returnFaceAttributes=emotion", ENDPOINT);

    Path path = Paths.get("./images/image1.JPG");
    byte[] data = Files.readAllBytes(path);

    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
    headers.set("Ocp-Apim-Subscription-Key", ACCESS_TOKEN);
    HttpEntity<byte[]> entity = new HttpEntity<byte[]>(data, headers);

    ResponseEntity<List> response = restTemplate
        .exchange(url, HttpMethod.POST, entity, List.class);
    List res = response.getBody();
    System.out.println(res);
  }

  @SuppressWarnings("rawtypes")
  public static boolean run(int[] face, double[] facevector, String input) throws IOException {
    RestTemplate restTemplate = new RestTemplate();
    restTemplate.getMessageConverters().add(0, new StringHttpMessageConverter(Charset.forName("UTF-8")));

    String url = String.format("%s?returnFaceLandmarks=true&returnFaceAttributes=emotion", ENDPOINT);
    Path path = Paths.get(input);
    byte[] data = Files.readAllBytes(path);

    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
    headers.set("Ocp-Apim-Subscription-Key", ACCESS_TOKEN);
    HttpEntity<byte[]> entity = new HttpEntity<byte[]>(data, headers);

    ResponseEntity<List> response = restTemplate
        .exchange(url, HttpMethod.POST, entity, List.class);
    List res = response.getBody();
    if (res.isEmpty())
      return true;
    Map mp = (Map) res.get(0);

    Map amp = (Map) mp.get("faceAttributes");
    Map emp = (Map) amp.get("emotion");
    if ((double) emp.get("anger") < 0.2 &&
        (double) emp.get("disgust") < 0.2 &&
        (double) emp.get("sadness") < 0.2)
      return true;

    //if ((double) emp.get("anger") > (double) emp.get("disgust") &&
    //    (double) emp.get("anger") > (double) emp.get("sadness"))
    //  facevector = ANGER.clone();
    //else if ((double) emp.get("disgust") > (double) emp.get("anger") &&
    //    (double) emp.get("disgust") > (double) emp.get("sadness"))
    //  facevector = DISGUST.clone();
    //else
    //  facevector = SADNESS.clone();

    Map fmp = (Map) mp.get("faceRectangle");
    face[0] = (int) fmp.get("left");
    face[1] = (int) fmp.get("top");
    face[2] = (int) fmp.get("width");
    face[3] = (int) fmp.get("height");

    Mat mat = imread(input, IMREAD_COLOR);
    UByteRawIndexer sI = mat.createIndexer();
    Map lmp = (Map) mp.get("faceLandmarks");
    for (int i=0,j=0; i<198; i+=3,j++) {
      int idx = j%27;
      int off = j/27;
      Map tmp = (Map) lmp.get(LANDS[idx]);
      int x = (int)((double) tmp.get("x")) + off;
      int y = (int)((double) tmp.get("y")) + off;

      facevector[i]   += (sI.get(x, y, 0)-127)/128.0;
      facevector[i+1] += (sI.get(x, y, 1)-127)/128.0;
      facevector[i+2] += (sI.get(x, y, 2)-127)/128.0;
    }

    return false;
  }

}
